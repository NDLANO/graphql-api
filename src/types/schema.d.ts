import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
export { };

declare global {
  /*******************************
   *                             *
   *          TYPE DEFS          *
   *                             *
   *******************************/
  export interface GQLQuery {
    resource?: GQLResource;
    article?: GQLArticle;
    subject?: GQLSubject;
    subjects?: Array<GQLSubject | null>;
    topic?: GQLTopic;
    topics?: Array<GQLTopic | null>;
    frontpage?: GQLFrontpage;
    filters?: Array<GQLSubjectFilter | null>;
    search?: GQLSearch;
    resourceTypes?: Array<GQLResourceTypeDefinition | null>;
  }
  
  export interface GQLResource {
    id: string;
    name: string;
    contentUri?: string;
    path?: string;
    resourceTypes?: Array<GQLResourceType | null>;
    meta?: GQLMeta;
    article?: GQLArticle;
    filters?: Array<GQLFilter | null>;
    parentTopics?: Array<GQLTopic | null>;
  }
  
  export interface GQLResourceType {
    id: string;
    name: string;
    resources?: Array<GQLResource | null>;
  }
  
  export interface GQLMeta {
    id: number;
    title: string;
    introduction?: string;
    metaDescription?: string;
    metaImage?: GQLMetaImage;
    lastUpdated?: string;
  }
  
  export interface GQLMetaImage {
    url?: string;
    alt?: string;
  }
  
  export interface GQLArticle {
    id: number;
    revision: number;
    title: string;
    introduction?: string;
    content: string;
    created: string;
    updated: string;
    visualElement?: string;
    metaImage?: GQLMetaImage;
    metaDescription: string;
    articleType: string;
    oldNdlaUrl?: string;
    requiredLibraries?: Array<GQLArticleRequiredLibrary | null>;
    metaData?: GQLArticleMetaData;
    supportedLanguages?: Array<string | null>;
    copyright: GQLCopyright;
  }
  
  export interface GQLArticleRequiredLibrary {
    name: string;
    url: string;
    mediaType: string;
  }
  
  export interface GQLArticleMetaData {
    footnotes?: Array<GQLFootNote | null>;
    images?: Array<GQLImageLicense | null>;
    audios?: Array<GQLAudioLicense | null>;
    brightcoves?: Array<GQLBrightcoveLicense | null>;
  }
  
  export interface GQLFootNote {
    ref: number;
    title: string;
    year: string;
    authors: Array<string | null>;
    edition?: string;
    publisher?: string;
    url?: string;
  }
  
  export interface GQLImageLicense {
    title: string;
    src: string;
    altText: string;
    copyright: GQLCopyright;
  }
  
  export interface GQLCopyright {
    license?: GQLLicense;
    creators?: Array<GQLContributor | null>;
    processors?: Array<GQLContributor | null>;
    rightsholders?: Array<GQLContributor | null>;
  }
  
  export interface GQLLicense {
    license: string;
    url?: string;
    description?: string;
  }
  
  export interface GQLContributor {
    type: string;
    name: string;
  }
  
  export interface GQLAudioLicense {
    title: string;
    src: string;
    copyright: GQLCopyright;
  }
  
  export interface GQLBrightcoveLicense {
    title: string;
    cover?: string;
    src?: string;
    iframe?: GQLBrightcoveIframe;
    copyright: GQLCopyright;
  }
  
  export interface GQLBrightcoveIframe {
    src: string;
    height: number;
    width: number;
  }
  
  export interface GQLFilter {
    id: string;
    name: string;
    connectionId?: string;
    relevanceId?: string;
  }
  
  export interface GQLTopic {
    id: string;
    contentUri?: string;
    name: string;
    path?: string;
    isPrimary?: boolean;
    parent?: string;
    article?: GQLArticle;
    meta?: GQLMeta;
    subtopics?: Array<GQLTopic | null>;
    filters?: Array<GQLFilter | null>;
    coreResources?: Array<GQLResource | null>;
    supplementaryResources?: Array<GQLResource | null>;
  }
  
  export interface GQLSubject {
    id: string;
    contentUri?: string;
    name: string;
    path: string;
    filters?: Array<GQLSubjectFilter | null>;
    frontpageFilters?: Array<GQLSubjectFilter | null>;
    subjectpage?: GQLSubjectPage;
    topics?: Array<GQLTopic | null>;
  }
  
  export interface GQLSubjectFilter {
    id: string;
    name: string;
    subjectId: string;
  }
  
  export interface GQLSubjectPage {
    topical?: GQLSubjectPageTopical;
    mostRead?: GQLSubjectPageArticles;
    banner?: GQLSubjectPageBanner;
    id: number;
    name?: string;
    facebook?: string;
    editorsChoices?: GQLSubjectPageArticles;
    latestContent?: GQLSubjectPageArticles;
    about?: GQLSubjectPageAbout;
    goTo?: GQLSubjectPageGoTo;
    
    /**
     * 
     * @deprecated Use layout field.
     */
    displayInTwoColumns?: boolean;
    layout?: string;
    twitter?: string;
  }
  
  export interface GQLSubjectPageTopical {
    resource?: GQLResource;
  }
  
  export interface GQLSubjectPageArticles {
    resources?: Array<GQLResource | null>;
  }
  
  export interface GQLSubjectPageBanner {
    desktopUrl?: string;
    desktopId?: string;
    mobileUrl?: string;
    mobileId?: string;
  }
  
  export interface GQLSubjectPageAbout {
    title?: string;
    description?: string;
    visualElement?: GQLSubjectPageVisualElement;
  }
  
  export interface GQLSubjectPageVisualElement {
    type?: string;
    url?: string;
    alt?: string;
  }
  
  export interface GQLSubjectPageGoTo {
    resourceTypes?: Array<GQLResourceTypeDefinition | null>;
  }
  
  export interface GQLResourceTypeDefinition {
    id: string;
    name: string;
    subtypes?: Array<GQLResourceTypeDefinition | null>;
  }
  
  export interface GQLFrontpage {
    topical?: Array<GQLResource | null>;
    categories?: Array<GQLCategory | null>;
  }
  
  export interface GQLCategory {
    name?: string;
    subjects?: Array<GQLSubject | null>;
  }
  
  export interface GQLSearch {
    pageSize?: string;
    page?: string;
    language?: string;
    totalCount?: string;
    results?: Array<GQLSearchResult | null>;
  }
  
  export interface GQLSearchResult {
    id: string;
    title?: string;
    supportedLanguages?: Array<string | null>;
    url?: string;
    metaDescription?: string;
    metaImage?: GQLMetaImage;
    contexts?: Array<GQLSearchContext | null>;
  }
  
  export interface GQLSearchContext {
    breadcrumbs?: Array<string | null>;
    learningResourceType?: string;
    resourceTypes?: Array<GQLSearchContextResourceTypes | null>;
    subject?: string;
    path?: string;
    id?: string;
    language?: string;
    filters?: Array<GQLSearchContextFilter | null>;
  }
  
  export interface GQLSearchContextResourceTypes {
    id?: string;
    name?: string;
    language?: string;
  }
  
  export interface GQLSearchContextFilter {
    name?: string;
    relevance?: string;
  }
  
  /*********************************
   *                               *
   *         TYPE RESOLVERS        *
   *                               *
   *********************************/
  /**
   * This interface define the shape of your resolver
   * Note that this type is designed to be compatible with graphql-tools resolvers
   * However, you can still use other generated interfaces to make your resolver type-safed
   */
  export interface GQLResolver {
    Query?: GQLQueryTypeResolver;
    Resource?: GQLResourceTypeResolver;
    ResourceType?: GQLResourceTypeTypeResolver;
    Meta?: GQLMetaTypeResolver;
    MetaImage?: GQLMetaImageTypeResolver;
    Article?: GQLArticleTypeResolver;
    ArticleRequiredLibrary?: GQLArticleRequiredLibraryTypeResolver;
    ArticleMetaData?: GQLArticleMetaDataTypeResolver;
    FootNote?: GQLFootNoteTypeResolver;
    ImageLicense?: GQLImageLicenseTypeResolver;
    Copyright?: GQLCopyrightTypeResolver;
    License?: GQLLicenseTypeResolver;
    Contributor?: GQLContributorTypeResolver;
    AudioLicense?: GQLAudioLicenseTypeResolver;
    BrightcoveLicense?: GQLBrightcoveLicenseTypeResolver;
    BrightcoveIframe?: GQLBrightcoveIframeTypeResolver;
    Filter?: GQLFilterTypeResolver;
    Topic?: GQLTopicTypeResolver;
    Subject?: GQLSubjectTypeResolver;
    SubjectFilter?: GQLSubjectFilterTypeResolver;
    SubjectPage?: GQLSubjectPageTypeResolver;
    SubjectPageTopical?: GQLSubjectPageTopicalTypeResolver;
    SubjectPageArticles?: GQLSubjectPageArticlesTypeResolver;
    SubjectPageBanner?: GQLSubjectPageBannerTypeResolver;
    SubjectPageAbout?: GQLSubjectPageAboutTypeResolver;
    SubjectPageVisualElement?: GQLSubjectPageVisualElementTypeResolver;
    SubjectPageGoTo?: GQLSubjectPageGoToTypeResolver;
    ResourceTypeDefinition?: GQLResourceTypeDefinitionTypeResolver;
    Frontpage?: GQLFrontpageTypeResolver;
    Category?: GQLCategoryTypeResolver;
    Search?: GQLSearchTypeResolver;
    SearchResult?: GQLSearchResultTypeResolver;
    SearchContext?: GQLSearchContextTypeResolver;
    SearchContextResourceTypes?: GQLSearchContextResourceTypesTypeResolver;
    SearchContextFilter?: GQLSearchContextFilterTypeResolver;
  }
  export interface GQLQueryTypeResolver<TParent = any> {
    resource?: QueryToResourceResolver<TParent>;
    article?: QueryToArticleResolver<TParent>;
    subject?: QueryToSubjectResolver<TParent>;
    subjects?: QueryToSubjectsResolver<TParent>;
    topic?: QueryToTopicResolver<TParent>;
    topics?: QueryToTopicsResolver<TParent>;
    frontpage?: QueryToFrontpageResolver<TParent>;
    filters?: QueryToFiltersResolver<TParent>;
    search?: QueryToSearchResolver<TParent>;
    resourceTypes?: QueryToResourceTypesResolver<TParent>;
  }
  
  export interface QueryToResourceArgs {
    id: string;
  }
  export interface QueryToResourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToResourceArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToArticleArgs {
    id: string;
  }
  export interface QueryToArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToArticleArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSubjectArgs {
    id: string;
  }
  export interface QueryToSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSubjectArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSubjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToTopicArgs {
    id: string;
  }
  export interface QueryToTopicResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToTopicArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToTopicsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToFrontpageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToSearchArgs {
    query?: string;
    page?: string;
    pageSize?: string;
    contextTypes?: string;
    language?: string;
    ids?: string;
    resourceTypes?: string;
    levels?: string;
    sort?: string;
    fallback?: boolean;
    subjects?: string;
    languageFilter?: Array<string | null>;
  }
  export interface QueryToSearchResolver<TParent = any, TResult = any> {
    (parent: TParent, args: QueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface QueryToResourceTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLResourceTypeResolver<TParent = any> {
    id?: ResourceToIdResolver<TParent>;
    name?: ResourceToNameResolver<TParent>;
    contentUri?: ResourceToContentUriResolver<TParent>;
    path?: ResourceToPathResolver<TParent>;
    resourceTypes?: ResourceToResourceTypesResolver<TParent>;
    meta?: ResourceToMetaResolver<TParent>;
    article?: ResourceToArticleResolver<TParent>;
    filters?: ResourceToFiltersResolver<TParent>;
    parentTopics?: ResourceToParentTopicsResolver<TParent>;
  }
  
  export interface ResourceToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToContentUriResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToResourceTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceToParentTopicsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLResourceTypeTypeResolver<TParent = any> {
    id?: ResourceTypeToIdResolver<TParent>;
    name?: ResourceTypeToNameResolver<TParent>;
    resources?: ResourceTypeToResourcesResolver<TParent>;
  }
  
  export interface ResourceTypeToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceTypeToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceTypeToResourcesArgs {
    topicId: string;
  }
  export interface ResourceTypeToResourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: ResourceTypeToResourcesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLMetaTypeResolver<TParent = any> {
    id?: MetaToIdResolver<TParent>;
    title?: MetaToTitleResolver<TParent>;
    introduction?: MetaToIntroductionResolver<TParent>;
    metaDescription?: MetaToMetaDescriptionResolver<TParent>;
    metaImage?: MetaToMetaImageResolver<TParent>;
    lastUpdated?: MetaToLastUpdatedResolver<TParent>;
  }
  
  export interface MetaToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaToIntroductionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaToMetaDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaToMetaImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaToLastUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLMetaImageTypeResolver<TParent = any> {
    url?: MetaImageToUrlResolver<TParent>;
    alt?: MetaImageToAltResolver<TParent>;
  }
  
  export interface MetaImageToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface MetaImageToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLArticleTypeResolver<TParent = any> {
    id?: ArticleToIdResolver<TParent>;
    revision?: ArticleToRevisionResolver<TParent>;
    title?: ArticleToTitleResolver<TParent>;
    introduction?: ArticleToIntroductionResolver<TParent>;
    content?: ArticleToContentResolver<TParent>;
    created?: ArticleToCreatedResolver<TParent>;
    updated?: ArticleToUpdatedResolver<TParent>;
    visualElement?: ArticleToVisualElementResolver<TParent>;
    metaImage?: ArticleToMetaImageResolver<TParent>;
    metaDescription?: ArticleToMetaDescriptionResolver<TParent>;
    articleType?: ArticleToArticleTypeResolver<TParent>;
    oldNdlaUrl?: ArticleToOldNdlaUrlResolver<TParent>;
    requiredLibraries?: ArticleToRequiredLibrariesResolver<TParent>;
    metaData?: ArticleToMetaDataResolver<TParent>;
    supportedLanguages?: ArticleToSupportedLanguagesResolver<TParent>;
    copyright?: ArticleToCopyrightResolver<TParent>;
  }
  
  export interface ArticleToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToRevisionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToIntroductionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToCreatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToUpdatedResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToVisualElementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToMetaImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToMetaDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToArticleTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToOldNdlaUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToRequiredLibrariesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToMetaDataResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToSupportedLanguagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleToCopyrightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLArticleRequiredLibraryTypeResolver<TParent = any> {
    name?: ArticleRequiredLibraryToNameResolver<TParent>;
    url?: ArticleRequiredLibraryToUrlResolver<TParent>;
    mediaType?: ArticleRequiredLibraryToMediaTypeResolver<TParent>;
  }
  
  export interface ArticleRequiredLibraryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleRequiredLibraryToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleRequiredLibraryToMediaTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLArticleMetaDataTypeResolver<TParent = any> {
    footnotes?: ArticleMetaDataToFootnotesResolver<TParent>;
    images?: ArticleMetaDataToImagesResolver<TParent>;
    audios?: ArticleMetaDataToAudiosResolver<TParent>;
    brightcoves?: ArticleMetaDataToBrightcovesResolver<TParent>;
  }
  
  export interface ArticleMetaDataToFootnotesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleMetaDataToImagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleMetaDataToAudiosResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ArticleMetaDataToBrightcovesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLFootNoteTypeResolver<TParent = any> {
    ref?: FootNoteToRefResolver<TParent>;
    title?: FootNoteToTitleResolver<TParent>;
    year?: FootNoteToYearResolver<TParent>;
    authors?: FootNoteToAuthorsResolver<TParent>;
    edition?: FootNoteToEditionResolver<TParent>;
    publisher?: FootNoteToPublisherResolver<TParent>;
    url?: FootNoteToUrlResolver<TParent>;
  }
  
  export interface FootNoteToRefResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FootNoteToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FootNoteToYearResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FootNoteToAuthorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FootNoteToEditionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FootNoteToPublisherResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FootNoteToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLImageLicenseTypeResolver<TParent = any> {
    title?: ImageLicenseToTitleResolver<TParent>;
    src?: ImageLicenseToSrcResolver<TParent>;
    altText?: ImageLicenseToAltTextResolver<TParent>;
    copyright?: ImageLicenseToCopyrightResolver<TParent>;
  }
  
  export interface ImageLicenseToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageLicenseToSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageLicenseToAltTextResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ImageLicenseToCopyrightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLCopyrightTypeResolver<TParent = any> {
    license?: CopyrightToLicenseResolver<TParent>;
    creators?: CopyrightToCreatorsResolver<TParent>;
    processors?: CopyrightToProcessorsResolver<TParent>;
    rightsholders?: CopyrightToRightsholdersResolver<TParent>;
  }
  
  export interface CopyrightToLicenseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CopyrightToCreatorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CopyrightToProcessorsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CopyrightToRightsholdersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLLicenseTypeResolver<TParent = any> {
    license?: LicenseToLicenseResolver<TParent>;
    url?: LicenseToUrlResolver<TParent>;
    description?: LicenseToDescriptionResolver<TParent>;
  }
  
  export interface LicenseToLicenseResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LicenseToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface LicenseToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLContributorTypeResolver<TParent = any> {
    type?: ContributorToTypeResolver<TParent>;
    name?: ContributorToNameResolver<TParent>;
  }
  
  export interface ContributorToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ContributorToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLAudioLicenseTypeResolver<TParent = any> {
    title?: AudioLicenseToTitleResolver<TParent>;
    src?: AudioLicenseToSrcResolver<TParent>;
    copyright?: AudioLicenseToCopyrightResolver<TParent>;
  }
  
  export interface AudioLicenseToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AudioLicenseToSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface AudioLicenseToCopyrightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLBrightcoveLicenseTypeResolver<TParent = any> {
    title?: BrightcoveLicenseToTitleResolver<TParent>;
    cover?: BrightcoveLicenseToCoverResolver<TParent>;
    src?: BrightcoveLicenseToSrcResolver<TParent>;
    iframe?: BrightcoveLicenseToIframeResolver<TParent>;
    copyright?: BrightcoveLicenseToCopyrightResolver<TParent>;
  }
  
  export interface BrightcoveLicenseToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BrightcoveLicenseToCoverResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BrightcoveLicenseToSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BrightcoveLicenseToIframeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BrightcoveLicenseToCopyrightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLBrightcoveIframeTypeResolver<TParent = any> {
    src?: BrightcoveIframeToSrcResolver<TParent>;
    height?: BrightcoveIframeToHeightResolver<TParent>;
    width?: BrightcoveIframeToWidthResolver<TParent>;
  }
  
  export interface BrightcoveIframeToSrcResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BrightcoveIframeToHeightResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface BrightcoveIframeToWidthResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLFilterTypeResolver<TParent = any> {
    id?: FilterToIdResolver<TParent>;
    name?: FilterToNameResolver<TParent>;
    connectionId?: FilterToConnectionIdResolver<TParent>;
    relevanceId?: FilterToRelevanceIdResolver<TParent>;
  }
  
  export interface FilterToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilterToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilterToConnectionIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FilterToRelevanceIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLTopicTypeResolver<TParent = any> {
    id?: TopicToIdResolver<TParent>;
    contentUri?: TopicToContentUriResolver<TParent>;
    name?: TopicToNameResolver<TParent>;
    path?: TopicToPathResolver<TParent>;
    isPrimary?: TopicToIsPrimaryResolver<TParent>;
    parent?: TopicToParentResolver<TParent>;
    article?: TopicToArticleResolver<TParent>;
    meta?: TopicToMetaResolver<TParent>;
    subtopics?: TopicToSubtopicsResolver<TParent>;
    filters?: TopicToFiltersResolver<TParent>;
    coreResources?: TopicToCoreResourcesResolver<TParent>;
    supplementaryResources?: TopicToSupplementaryResourcesResolver<TParent>;
  }
  
  export interface TopicToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToContentUriResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToIsPrimaryResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToParentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToArticleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToMetaResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToSubtopicsArgs {
    filterIds?: string;
  }
  export interface TopicToSubtopicsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: TopicToSubtopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToCoreResourcesArgs {
    filterIds?: string;
  }
  export interface TopicToCoreResourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: TopicToCoreResourcesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface TopicToSupplementaryResourcesArgs {
    filterIds?: string;
  }
  export interface TopicToSupplementaryResourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: TopicToSupplementaryResourcesArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectTypeResolver<TParent = any> {
    id?: SubjectToIdResolver<TParent>;
    contentUri?: SubjectToContentUriResolver<TParent>;
    name?: SubjectToNameResolver<TParent>;
    path?: SubjectToPathResolver<TParent>;
    filters?: SubjectToFiltersResolver<TParent>;
    frontpageFilters?: SubjectToFrontpageFiltersResolver<TParent>;
    subjectpage?: SubjectToSubjectpageResolver<TParent>;
    topics?: SubjectToTopicsResolver<TParent>;
  }
  
  export interface SubjectToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectToContentUriResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectToFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectToFrontpageFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectToSubjectpageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectToTopicsArgs {
    all?: boolean;
    filterIds?: string;
  }
  export interface SubjectToTopicsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: SubjectToTopicsArgs, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectFilterTypeResolver<TParent = any> {
    id?: SubjectFilterToIdResolver<TParent>;
    name?: SubjectFilterToNameResolver<TParent>;
    subjectId?: SubjectFilterToSubjectIdResolver<TParent>;
  }
  
  export interface SubjectFilterToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectFilterToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectFilterToSubjectIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectPageTypeResolver<TParent = any> {
    topical?: SubjectPageToTopicalResolver<TParent>;
    mostRead?: SubjectPageToMostReadResolver<TParent>;
    banner?: SubjectPageToBannerResolver<TParent>;
    id?: SubjectPageToIdResolver<TParent>;
    name?: SubjectPageToNameResolver<TParent>;
    facebook?: SubjectPageToFacebookResolver<TParent>;
    editorsChoices?: SubjectPageToEditorsChoicesResolver<TParent>;
    latestContent?: SubjectPageToLatestContentResolver<TParent>;
    about?: SubjectPageToAboutResolver<TParent>;
    goTo?: SubjectPageToGoToResolver<TParent>;
    displayInTwoColumns?: SubjectPageToDisplayInTwoColumnsResolver<TParent>;
    layout?: SubjectPageToLayoutResolver<TParent>;
    twitter?: SubjectPageToTwitterResolver<TParent>;
  }
  
  export interface SubjectPageToTopicalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToMostReadResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToBannerResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToFacebookResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToEditorsChoicesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToLatestContentResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToAboutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToGoToResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToDisplayInTwoColumnsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToLayoutResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageToTwitterResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectPageTopicalTypeResolver<TParent = any> {
    resource?: SubjectPageTopicalToResourceResolver<TParent>;
  }
  
  export interface SubjectPageTopicalToResourceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectPageArticlesTypeResolver<TParent = any> {
    resources?: SubjectPageArticlesToResourcesResolver<TParent>;
  }
  
  export interface SubjectPageArticlesToResourcesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectPageBannerTypeResolver<TParent = any> {
    desktopUrl?: SubjectPageBannerToDesktopUrlResolver<TParent>;
    desktopId?: SubjectPageBannerToDesktopIdResolver<TParent>;
    mobileUrl?: SubjectPageBannerToMobileUrlResolver<TParent>;
    mobileId?: SubjectPageBannerToMobileIdResolver<TParent>;
  }
  
  export interface SubjectPageBannerToDesktopUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageBannerToDesktopIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageBannerToMobileUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageBannerToMobileIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectPageAboutTypeResolver<TParent = any> {
    title?: SubjectPageAboutToTitleResolver<TParent>;
    description?: SubjectPageAboutToDescriptionResolver<TParent>;
    visualElement?: SubjectPageAboutToVisualElementResolver<TParent>;
  }
  
  export interface SubjectPageAboutToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageAboutToDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageAboutToVisualElementResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectPageVisualElementTypeResolver<TParent = any> {
    type?: SubjectPageVisualElementToTypeResolver<TParent>;
    url?: SubjectPageVisualElementToUrlResolver<TParent>;
    alt?: SubjectPageVisualElementToAltResolver<TParent>;
  }
  
  export interface SubjectPageVisualElementToTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageVisualElementToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SubjectPageVisualElementToAltResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSubjectPageGoToTypeResolver<TParent = any> {
    resourceTypes?: SubjectPageGoToToResourceTypesResolver<TParent>;
  }
  
  export interface SubjectPageGoToToResourceTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLResourceTypeDefinitionTypeResolver<TParent = any> {
    id?: ResourceTypeDefinitionToIdResolver<TParent>;
    name?: ResourceTypeDefinitionToNameResolver<TParent>;
    subtypes?: ResourceTypeDefinitionToSubtypesResolver<TParent>;
  }
  
  export interface ResourceTypeDefinitionToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceTypeDefinitionToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface ResourceTypeDefinitionToSubtypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLFrontpageTypeResolver<TParent = any> {
    topical?: FrontpageToTopicalResolver<TParent>;
    categories?: FrontpageToCategoriesResolver<TParent>;
  }
  
  export interface FrontpageToTopicalResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface FrontpageToCategoriesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLCategoryTypeResolver<TParent = any> {
    name?: CategoryToNameResolver<TParent>;
    subjects?: CategoryToSubjectsResolver<TParent>;
  }
  
  export interface CategoryToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface CategoryToSubjectsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSearchTypeResolver<TParent = any> {
    pageSize?: SearchToPageSizeResolver<TParent>;
    page?: SearchToPageResolver<TParent>;
    language?: SearchToLanguageResolver<TParent>;
    totalCount?: SearchToTotalCountResolver<TParent>;
    results?: SearchToResultsResolver<TParent>;
  }
  
  export interface SearchToPageSizeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchToPageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchToTotalCountResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchToResultsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSearchResultTypeResolver<TParent = any> {
    id?: SearchResultToIdResolver<TParent>;
    title?: SearchResultToTitleResolver<TParent>;
    supportedLanguages?: SearchResultToSupportedLanguagesResolver<TParent>;
    url?: SearchResultToUrlResolver<TParent>;
    metaDescription?: SearchResultToMetaDescriptionResolver<TParent>;
    metaImage?: SearchResultToMetaImageResolver<TParent>;
    contexts?: SearchResultToContextsResolver<TParent>;
  }
  
  export interface SearchResultToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToTitleResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToSupportedLanguagesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToUrlResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToMetaDescriptionResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToMetaImageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchResultToContextsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSearchContextTypeResolver<TParent = any> {
    breadcrumbs?: SearchContextToBreadcrumbsResolver<TParent>;
    learningResourceType?: SearchContextToLearningResourceTypeResolver<TParent>;
    resourceTypes?: SearchContextToResourceTypesResolver<TParent>;
    subject?: SearchContextToSubjectResolver<TParent>;
    path?: SearchContextToPathResolver<TParent>;
    id?: SearchContextToIdResolver<TParent>;
    language?: SearchContextToLanguageResolver<TParent>;
    filters?: SearchContextToFiltersResolver<TParent>;
  }
  
  export interface SearchContextToBreadcrumbsResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextToLearningResourceTypeResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextToResourceTypesResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextToSubjectResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextToPathResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextToFiltersResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSearchContextResourceTypesTypeResolver<TParent = any> {
    id?: SearchContextResourceTypesToIdResolver<TParent>;
    name?: SearchContextResourceTypesToNameResolver<TParent>;
    language?: SearchContextResourceTypesToLanguageResolver<TParent>;
  }
  
  export interface SearchContextResourceTypesToIdResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextResourceTypesToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextResourceTypesToLanguageResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface GQLSearchContextFilterTypeResolver<TParent = any> {
    name?: SearchContextFilterToNameResolver<TParent>;
    relevance?: SearchContextFilterToRelevanceResolver<TParent>;
  }
  
  export interface SearchContextFilterToNameResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
  export interface SearchContextFilterToRelevanceResolver<TParent = any, TResult = any> {
    (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
  }
  
}